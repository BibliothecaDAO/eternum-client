/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 public/models/world_map.glb --transform
*/

import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { useControls, button } from 'leva';
import { Water } from 'three/addons/objects/Water2.js';
import * as THREE from 'three';

const WaterModel = () => {
  const params = {
    color: '#ffffff',
    scale: 30,
    flowX: 1,
    flowY: 1
  };

  const waterGeometry = new THREE.PlaneGeometry( 4, 4 );
  const textureLoader = new THREE.TextureLoader();
  const flowMap = textureLoader.load( 'textures/water/Water_1_M_Flow.jpg' );

  let water = new Water( waterGeometry, {
    color: params.color,
    scale: params.scale,
    flowMap: flowMap,
    textureWidth: 1024,
    textureHeight: 1024
  } );
  return (
    <primitive object={water}
      rotation={[-Math.PI / 2, 0, 0]}
      position={[0, 0.001, 0]}
    />
  )
}
export function Model(props) {
  const { nodes, materials } = useGLTF('/models/world_map-transformed.glb')
  const { worldmapPosition, worldmapScale } = useControls({
    worldmapPosition:
    {
        value: { x: 0, z: 0, y: 0 },
        step: 0.01
    },
    worldmapScale:
    {
        value: 161.05,
        step: 0.05
    }
})
  return (<>      
    <group {...props} dispose={null} scale={[worldmapScale, worldmapScale, worldmapScale]} position={[worldmapPosition.x, worldmapPosition.y, worldmapPosition.z]}>
      <WaterModel />
      <mesh geometry={nodes.ocean.geometry} material={materials.Ocean} position={[0, -0.01, 0]} scale={[4, 1, 4]} />
      {/* <mesh position={[0,0,0]} rotation={
        [-Math.PI / 2, 0, 0]
      }>
        <planeGeometry args={[20, 20]} />
        <meshBasicMaterial color="skyblue" />
      </mesh> */}
      <mesh geometry={nodes.continents.geometry} material={materials.Continents} position={[0, 0.01, 0]} scale={[0.89, 0.9, 0.86]} />
    </group>
    </>
  )
}

useGLTF.preload('/models/world_map-transformed.glb')
